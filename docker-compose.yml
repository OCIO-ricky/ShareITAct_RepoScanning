# ------------------------------------------
# Builds and run multiple docker containers to
# processs concurrently the multiple platforms.
# ---------------------------------
# docker-compose up --build -d
# ---------------------------------
services:

  scan-github:
    build: . # Builds using the Dockerfile in the current directory (your project root)
    container_name: scanner-github-instance
    environment:
      # These environment variables will override any values from the .env file
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GITHUB_ORGS=cdcent,cdcgov
      - SCANNER_MAX_WORKERS=3
      - AI_ENABLED=true
      # Add any other .env variables your script needs
    volumes:
      - ./output:/app/output 
      - ./logs:/app/logs 
      - .env:/app/.env
    command: >
      python generate_codejson.py github
 
  scan-gitlab:
    build: .
    container_name: scanner-gitlab-instance
    environment:
      - GITLAB_TOKEN=${GITLAB_TOKEN}
      - GITLAB_GROUPS=cdcent
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AI_ENABLED=${AI_ENABLED:-true}
      - SCANNER_MAX_WORKERS=4
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs 
      - .env:/app/.env
    command: >
      python generate_codejson.py gitlab 

  # scan-azure:
  #   build: .
  #   container_name: scanner-azure-instance
  #   environment:
  #     - AZURE_DEVOPS_TOKEN=${AZURE_DEVOPS_TOKEN}
  #     - AZURE_DEVOPS_TARGETS="MyAzureOrg/ProjectA,MyAzureOrg/ProjectB"
  #     - GOOGLE_API_KEY=${GOOGLE_API_KEY}
  #     - AI_ENABLED=true}
  #     - SCANNER_MAX_WORKERS=4
  #   volumes:
  #     - ./output:/app/output
  #     - ./logs:/app/logs
  #     - .env:/app/.env
  #   command: >
  #     python generate_codejson.py azure 


# -------------------------
# DEBUG
# -------------------
# ---------------------------------
# You can then open the container's terminal or shell and run the scanner commands
# Example: 
# #> python generate_codejson.py github --gh-tk <PAT> --orgs cdcent --limit 30
# ---------------------------------

#services:
  # repo-scanner:
  #   build:
  #     context: . # Use the Dockerfile in the current directory
  #     dockerfile: Dockerfile
  #   image: cdc-repo-scanner:latest 
  #   container_name: cdc_repo_scanner_app # Optional: give a specific name to the running container
  #   # Mount volumes for persistent data and configuration
  #   # This replaces the -v flags from the docker run command
  #   volumes:
  #     - ./output:/app/output   # Mounts host's ./output to /app/output in container
  #     - ./logs:/app/logs       # Mounts host's ./logs to /app/logs in container
  #     - .env:/app/.env

  #   # Load environment variables from the .env file in the current directory
  #   env_file:
  #     - .env
  #   # Keep stdin open and allocate a TTY for the main process (e.g., bash)
  #   stdin_open: true
  #   tty: true
