# ------------------------------------------
# Builds and run multiple docker containers to
# processs concurrently the multiple platforms.
# ---------------------------------
# Just run: docker-compose up -d --build
#
# (to rebuilt the image, if you deleted it or changed ./Dockerfile): docker-compose build --no-cache
# or:  docker build -t cdc-repo-scanner . 
# ---------------------------------
services:

  scan-github:
    image: cdc-repo-scanner:latest
    build: . 
    container_name: scanner-github-instance
    environment:
      # These environment variables will read values from the .env file, unless you override them here.
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GITHUB_ORGS=${GITHUB_ORGS}
      - SCANNER_MAX_WORKERS=${SCANNER_MAX_WORKERS:-5}
      - AI_ENABLED=${AI_ENABLED:-true}
      - TZ=America/New_York
    volumes:
      - ./output:/app/output 
      - ./logs:/app/logs 
      - ./.env:/app/.env
    command: >
      python generate_codejson.py github
 
  scan-gitlab:
    image: cdc-repo-scanner:latest
  #  build: . 
    depends_on: [scan-github] 
    container_name: scanner-gitlab-instance
    environment:
      - GITLAB_TOKEN=${GITLAB_TOKEN}
      - GITLAB_GROUPS=${GITLAB_GROUPS}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AI_ENABLED=${AI_ENABLED:-true}
      - SCANNER_MAX_WORKERS=${SCANNER_MAX_WORKERS:-5}
      - TZ=America/New_York
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs 
      - ./.env:/app/.env
    command: >
      python generate_codejson.py gitlab 

  scan-azure:
    image: cdc-repo-scanner:latest
    depends_on: [scan-github] 
    container_name: scanner-azure-instance
    environment:
      - AZURE_DEVOPS_TOKEN=${AZURE_DEVOPS_TOKEN}
      - AZURE_DEVOPS_TARGETS=${AZURE_DEVOPS_TARGETS}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AI_ENABLED=${AI_ENABLED:-true}
      - SCANNER_MAX_WORKERS=${SCANNER_MAX_WORKERS:-4}
      - TZ=America/New_York
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
      - ./.env:/app/.env
    command: >
      python generate_codejson.py azure 


#-------------------------
# MERGE THESE THE RESULTS
# -------------------
#   This service will run ONLY if scan-github, scan-gitlab, and scan-azure completed successfully.
  merge-results:
    image: cdc-repo-scanner:latest
    container_name: scanner-merge-instance
    depends_on:
     scan-github:
       condition: service_completed_successfully
     scan-gitlab:
       condition: service_completed_successfully
     scan-azure:
        condition: service_completed_successfully
    environment:
      - AI_ENABLED=false
      - TZ=America/New_York
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs 
      - ./.env:/app/.env
    command: >
      python generate_codejson.py merge

# ---------------------------------
# DEBUG  (OPTIONAL )
# The next container runs nothing automatically. Its like an open terminal.
# You can use it to manually run a scanner command or utility via its terminal window (Exec tab).
# Examples: 
# $> python generate_codejson.py github --gh-tk <PAT> --orgs cdcent --limit 30
# $> python utils/azure_setup_test.py
# ---------------------------------

  # session-scanner:
  #   build:
  #     context: . # Use the Dockerfile in the current directory
  #     dockerfile: Dockerfile
  #   image: cdc-repo-scanner:latest 
  #   container_name: cdc_repo_scanner_app # Optional: give a specific name to the running container
  #   # Mount volumes for persistent data and configuration
  #   # This replaces the -v flags from the docker run command
  #   volumes:
  #     - ./output:/app/output   # Mounts host's ./output to /app/output in container
  #     - ./logs:/app/logs       # Mounts host's ./logs to /app/logs in container
  #     - ./.env:/app/.env

  #   # Load environment variables from the .env file in the current directory
  #   env_file:
  #     - .env
  #   # Keep stdin open and allocate a TTY for the main process (e.g., bash)
  #   stdin_open: true
  #   tty: true
